	
	===========GENERAL============
	public void crea_perso() {
		g_race = in_out.askString(STR_RACE_CHOICE);
		
		if (!g_race.equals("Magicien") && !g_race.equals("Guerrier")) {
			in_out.print(STR_INVALID_RACE);
			crea_perso();
			return;
		}
		
		
		
		
		
		
		
		===========WIZ===========
		public void wizCreaPerso() {
		g_race = in_out.askString(STR_RACE_CHOICE);
		
		if (!g_race.equals("Magicien") && !g_race.equals("Guerrier")) {
			in_out.print(STR_INVALID_RACE);
			crea_perso();
			return;
		}
			
		g_nom_perso = in_out.askString(STR_NAME_CHOICE);
		g_wiz = wiz_HMap.get(g_nom_perso);
		if (g_wiz != null) {
				do {
					g_nom_perso = in_out.askString(STR_INVALID_NAME);
					g_wiz = wiz_HMap.get(g_nom_perso);
				} while (g_wiz != null);
		}
				while (true) {
			try {
				g_life = in_out.askInt(STR_LIFE_CHOICE);
				g_attack = in_out.askInt(STR_ATTACK_CHOICE);
				break;
			} catch (InputMismatchException error) {
				in_out.print(STR_INVALID);
				in_out.scan.nextLine();
			}
		}
		g_url = in_out.askString(STR_URL_CHOICE);
				if (g_race.equals("Magicien")) {
			try {
				g_wiz = new Wizzard(g_nom_perso, g_url, g_life, g_attack);
			} catch (IllegalArgumentException param_crea_invalides) {
				if (!g_nom_perso.equals("")) {
					g_wiz = new Wizzard(g_nom_perso);
				} else {
					g_wiz = new Wizzard();

				}
			}
			wiz_HMap.put(g_nom_perso, g_wiz);
		}
		in_out.print(STR_SUCCESS);
		
		




		===========WAR===========
		
			public void warCreaPerso() {
		g_race = in_out.askString(STR_RACE_CHOICE);
		
		if (!g_race.equals("Magicien") && !g_race.equals("Guerrier")) {
			in_out.print(STR_INVALID_RACE);
			crea_perso();
			return;
		}
		
		g_nom_perso = in_out.askString(STR_NAME_CHOICE);
		g_war = war_HMap.get(g_nom_perso);
		if (g_war != null) {
			do {
				g_nom_perso = in_out.askString(STR_INVALID_NAME);
				g_war = war_HMap.get(g_nom_perso);
			} while (g_war != null);
		}		while (true) {
			try {
				g_life = in_out.askInt(STR_LIFE_CHOICE);
				g_attack = in_out.askInt(STR_ATTACK_CHOICE);
				break;
			} catch (InputMismatchException error) {
				in_out.print(STR_INVALID);
				in_out.scan.nextLine();
			}
		}
		g_url = in_out.askString(STR_URL_CHOICE);
	
		try {
				g_war = new Warrior(g_nom_perso, g_url, g_life, g_attack);
			} catch (Exception param_crea_invalides) {
				if (!g_nom_perso.equals("")) {
					g_war = new Warrior(g_nom_perso);
				} else {
					g_war = new Warrior();
				}
			}
			war_HMap.put(g_nom_perso, g_war);
		}
		in_out.print(STR_SUCCESS);
		




